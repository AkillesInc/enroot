#! /bin/bash

# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.

set -euo pipefail
shopt -s lastpipe

default() { eval export "$1=\${$1:-${2-}}"; }

default XDG_DATA_HOME        "${HOME:-~}/.local/share"
default XDG_CONFIG_HOME      "${HOME:-~}/.config"
default XDG_CACHE_HOME       "${HOME:-~}/.cache"
default XDG_RUNTIME_DIR      "/run"

default ENROOT_LIBEXEC_PATH  "@libexecdir@"
default ENROOT_SYSCONF_PATH  "@sysconfdir@"
default ENROOT_CONFIG_PATH   "${XDG_CONFIG_HOME}/enroot"
default ENROOT_CACHE_PATH    "${XDG_CACHE_HOME}/enroot"
default ENROOT_DATA_PATH     "${XDG_DATA_HOME}/enroot"
default ENROOT_RUNTIME_PATH  "${XDG_RUNTIME_DIR}/enroot"

default ENROOT_GZIP_PROG     "$(command -v pigz > /dev/null && echo pigz || echo gzip)"
default ENROOT_SQUASH_OPTS   "-comp lzo -noD"
default ENROOT_LOGIN_SHELL   "/bin/sh"
default ENROOT_ROOTFS_RW     # unset
default ENROOT_REMAP_ROOT    # unset
default ENROOT_BUNDLE_ALL    # unset
default ENROOT_BUNDLE_SUM    # unset

(umask 077 && mkdir -p "${ENROOT_CONFIG_PATH}" "${ENROOT_CACHE_PATH}" "${ENROOT_DATA_PATH}" "${ENROOT_RUNTIME_PATH}")

source "${ENROOT_LIBEXEC_PATH}/common.sh"
source "${ENROOT_LIBEXEC_PATH}/docker.sh"
source "${ENROOT_LIBEXEC_PATH}/runtime.sh"

for cmd in curl jq parallel mksquashfs unsquashfs tar "${ENROOT_GZIP_PROG}"; do
    command -v "${cmd}" > /dev/null || common::err "Command not found: ${cmd}"
done

enroot::usage() {
    cat <<- EOF
	Usage: ${0##*/} COMMAND [ARG...]
	
	 Commands:
	    version
	    import [--output|-o IMAGE] URI
	    export [--output|-o IMAGE] NAME
	    create [--name|-n NAME] IMAGE
	    list [--fancy|-f]
	    remove [--force|-f] NAME...
	    start [--root|-r] [--rw|-w] [--conf|-c CONFIG] NAME [COMMAND] [ARG...]
	    bundle [--all|-a] [--output|-o BUNDLE] [--checksum|-c] [--target|-t DIR] [--desc|-d TEXT] IMAGE
	EOF
    exit 0
}

enroot::version() {
    printf "%s\n" "@version@"
}

enroot::import() {
    local uri=""
    local filename=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -o|--output)
            [ -z "${2-}" ] && enroot::usage
            filename="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage
    fi
    uri="$1"

    runtime::import "${uri}" "${filename}"
}

enroot::export() {
    local name=""
    local filename=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -o|--output)
            [ -z "${2-}" ] && enroot::usage
            filename="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage
    fi
    name="$1"

    runtime::export "${name}" "${filename}"
}

enroot::create() {
    local image=""
    local name=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -n|--name)
            [ -z "${2-}" ] && enroot::usage
            name="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage
    fi
    image="$1"

    runtime::create "${image}" "${name}"
}

enroot::start() {
    local name=""
    local conf=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -c|--conf)
            [ -z "${2-}" ] && enroot::usage
            conf="$2"
            shift 2
            ;;
        -r|--root)
            ENROOT_REMAP_ROOT=y
            shift
            ;;
        -w|--rw)
            ENROOT_ROOTFS_RW=y
            shift
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage
    fi
    name="$1"
    shift

    runtime::start "${name}" "${conf}" "$@"
}

enroot::list() {
    local fancy=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -f|--fancy)
            fancy=y
            shift
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done

    runtime::list "${fancy}"
}

enroot::remove() {
    local name=""
    local force=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -f|--force)
            force=y
            shift
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage
    fi

    for name in "$@"; do
        runtime::remove "${name}" "${force}"
    done
}

enroot::bundle() {
    local image=""
    local filename=""
    local target=""
    local desc=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -a|--all)
            ENROOT_BUNDLE_ALL=y
            shift
            ;;
        -c|--checksum)
            ENROOT_BUNDLE_SUM=y
            shift
            ;;
        -o|--output)
            [ -z "${2-}" ] && enroot::usage
            filename="$2"
            shift 2
            ;;
        -t|--target)
            [ -z "${2-}" ] && enroot::usage
            target="$2"
            shift 2
            ;;
        -d|--desc)
            [ -z "${2-}" ] && enroot::usage
            desc="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage
    fi
    image="$1"

    runtime::bundle "${image}" "${filename}" "${target}" "${desc}"
}

if [ $# -lt 1 ]; then
    enroot::usage
fi
command="$1"; shift

case "${command}" in
version)
    enroot::version "$@" ;;
import)
    enroot::import "$@" ;;
export)
    enroot::export "$@" ;;
create)
    enroot::create "$@" ;;
start)
    enroot::start "$@" ;;
list)
    enroot::list "$@" ;;
remove)
    enroot::remove "$@" ;;
bundle)
    enroot::bundle "$@" ;;
*)
    enroot::usage ;;
esac

exit 0
