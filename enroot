#! /bin/bash

# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.

set -euo pipefail
shopt -s lastpipe

default() { eval export "$1=\${$1:-${2-}}"; }

default XDG_DATA_HOME        "${HOME:-~}/.local/share"
default XDG_CONFIG_HOME      "${HOME:-~}/.config"
default XDG_CACHE_HOME       "${HOME:-~}/.cache"
default XDG_RUNTIME_DIR      "/run"

default ENROOT_LIBEXEC_PATH  "@libexecdir@"
default ENROOT_SYSCONF_PATH  "@sysconfdir@"
default ENROOT_CONFIG_PATH   "${XDG_CONFIG_HOME}/enroot"
default ENROOT_CACHE_PATH    "${XDG_CACHE_HOME}/enroot"
default ENROOT_DATA_PATH     "${XDG_DATA_HOME}/enroot"
default ENROOT_RUNTIME_PATH  "${XDG_RUNTIME_DIR}/enroot"

default ENROOT_GZIP_PROG     "$(command -v pigz > /dev/null && echo pigz || echo gzip)"
default ENROOT_SQUASH_OPTS   "-comp lzo -noD"
default ENROOT_LOGIN_SHELL   "/bin/sh"
default ENROOT_ROOTFS_RW     # unset
default ENROOT_REMAP_ROOT    # unset
default ENROOT_BUNDLE_ALL    # unset
default ENROOT_BUNDLE_SUM    # unset

(umask 077 && mkdir -p "${ENROOT_CONFIG_PATH}" "${ENROOT_CACHE_PATH}" "${ENROOT_DATA_PATH}" "${ENROOT_RUNTIME_PATH}")

source "${ENROOT_LIBEXEC_PATH}/common.sh"
source "${ENROOT_LIBEXEC_PATH}/docker.sh"
source "${ENROOT_LIBEXEC_PATH}/runtime.sh"

for cmd in curl jq parallel mksquashfs unsquashfs tar "${ENROOT_GZIP_PROG}"; do
    command -v "${cmd}" > /dev/null || common::err "Command not found: ${cmd}"
done

enroot::usage() {
    case "${1-}" in
    bundle)
        cat <<- EOF
		Usage: ${0##*/} bundle [options] [--] IMAGE
		
		Create a self-extracting bundle from a container image.
		
		 Options:
		   -a, --all            Include user configuration files in the bundle
		   -c, --checksum       Generate an embedded checksum
		   -d, --desc TEXT      Provide a description of the bundle
		   -o, --output BUNDLE  Name of the output bundle file (defaults to "IMAGE.run")
		   -t, --target DIR     Target directory used by --keep (defaults to "\$PWD/BUNDLE")
		EOF
        ;;
    create)
        cat <<- EOF
		Usage: ${0##*/} create [options] [--] IMAGE
		
		Create a container root filesystem from a container image.
		
		 Options:
		   -n, --name  Name of the container (defaults to "IMAGE")
		EOF
        ;;
    export)
        cat <<- EOF
		Usage: ${0##*/} export [options] [--] NAME
		
		Create a container image from a container root filesystem.
		
		 Options:
		   -o, --output  Name of the output image file (defaults to "NAME.sqsh")
		EOF
        ;;
    import)
        cat <<- EOF
		Usage: ${0##*/} import [options] [--] URI
		
		Import a container image from a specific location.
		
		 Schemes:
		   docker://[USER@][REGISTRY#]IMAGE[:TAG]  Import a Docker image from a registry
		
		 Options:
		   -o, --output  Name of the output image file (defaults to "URI.sqsh")
		EOF
        ;;
    list)
        cat <<- EOF
		Usage: ${0##*/} list [options]
		
		List all the container root filesystems on the system.
		
		 Options:
		   -f, --fancy  Display more information in tabular format
		EOF
        ;;
    remove)
        cat <<- EOF
		Usage: ${0##*/} remove [options] [--] NAME...
		
		Delete one or multiple container root filesystems.
		
		 Options:
		   -f, --force  Do not prompt for confirmation
		EOF
        ;;
    start)
        cat <<- EOF
		Usage: ${0##*/} start [options] [--] NAME|IMAGE [COMMAND] [ARG...]
		
		Start a container and invoke the command script within its root filesystem.
		Command and arguments are passed to the script as input parameters.
		
		In the absence of a command script and if a command was given, it will be executed direcly.
		Otherwise, an interactive shell will be started within the container.
		
		 Options:
		   -c, --conf CONFIG    Specify a configuration script to run before the container starts
		   -e, --env KEY[=VAL]  Export an environment variable inside the container
		   -r, --root           Ask to be remapped to root inside the container
		   -w, --rw             Make the container root filesystem writable
		   -m, --mount FSTAB    Perform a mount from the host inside the container (colon-separated)
		EOF
        ;;
    ""|*)
        cat <<- EOF
		Usage: ${0##*/} COMMAND [ARG...]
		
		 Commands:
		   bundle [options] [--] IMAGE
		   create [options] [--] IMAGE
		   export [options] [--] NAME
		   import [options] [--] URI
		   list   [options]
		   remove [options] [--] NAME...
		   start  [options] [--] NAME|IMAGE [COMMAND] [ARG...]
		   version
		EOF
        ;;
    esac

    echo
    exit 0
}

enroot::version() {
    printf "%s\n" "@version@"
}

enroot::import() {
    local uri=""
    local filename=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -o|--output)
            [ -z "${2-}" ] && enroot::usage import
            filename="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage import ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage import
    fi
    uri="$1"

    runtime::import "${uri}" "${filename}"
}

enroot::export() {
    local name=""
    local filename=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -o|--output)
            [ -z "${2-}" ] && enroot::usage export
            filename="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage export ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage export
    fi
    name="$1"

    runtime::export "${name}" "${filename}"
}

enroot::create() {
    local image=""
    local name=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -n|--name)
            [ -z "${2-}" ] && enroot::usage create
            name="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage create ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage create
    fi
    image="$1"

    runtime::create "${image}" "${name}"
}

enroot::start() {
    local name=""
    local conf=""
    local -a mounts=()
    local -a environ=()

    while [ $# -gt 0 ]; do
        case "$1" in
        -c|--conf)
            [ -z "${2-}" ] && enroot::usage start
            conf="$2"
            shift 2
            ;;
        -m|--mount)
            [ -z "${2-}" ] && enroot::usage start
            mounts+=("$2")
            shift 2
            ;;
        -e|--env)
            [ -z "${2-}" ] && enroot::usage start
            environ+=("$2")
            shift 2
            ;;
        -r|--root)
            ENROOT_REMAP_ROOT=y
            shift
            ;;
        -w|--rw)
            ENROOT_ROOTFS_RW=y
            shift
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage start ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage start
    fi
    name="$1"
    shift

    runtime::start "${name}" "${conf}"     \
      "$(IFS=$'\n'; echo ${mounts[*]+"${mounts[*]}"})"  \
      "$(IFS=$'\n'; echo ${environ[*]+"${environ[*]}"})" \
      "$@"
}

enroot::list() {
    local fancy=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -f|--fancy)
            fancy=y
            shift
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage list ;;
        *)
            break ;;
        esac
    done

    runtime::list "${fancy}"
}

enroot::remove() {
    local name=""
    local force=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -f|--force)
            force=y
            shift
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage remove ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage remove
    fi

    for name in "$@"; do
        runtime::remove "${name}" "${force}"
    done
}

enroot::bundle() {
    local image=""
    local filename=""
    local target=""
    local desc=""

    while [ $# -gt 0 ]; do
        case "$1" in
        -a|--all)
            ENROOT_BUNDLE_ALL=y
            shift
            ;;
        -c|--checksum)
            ENROOT_BUNDLE_SUM=y
            shift
            ;;
        -o|--output)
            [ -z "${2-}" ] && enroot::usage bundle
            filename="$2"
            shift 2
            ;;
        -t|--target)
            [ -z "${2-}" ] && enroot::usage bundle
            target="$2"
            shift 2
            ;;
        -d|--desc)
            [ -z "${2-}" ] && enroot::usage bundle
            desc="$2"
            shift 2
            ;;
        --)
            shift; break ;;
        -?*)
            enroot::usage bundle ;;
        *)
            break ;;
        esac
    done
    if [ $# -lt 1 ]; then
        enroot::usage bundle
    fi
    image="$1"

    runtime::bundle "${image}" "${filename}" "${target}" "${desc}"
}

if [ $# -lt 1 ]; then
    enroot::usage
fi
command="$1"; shift

case "${command}" in
version)
    enroot::version "$@" ;;
import)
    enroot::import "$@" ;;
export)
    enroot::export "$@" ;;
create)
    enroot::create "$@" ;;
start)
    enroot::start "$@" ;;
list)
    enroot::list "$@" ;;
remove)
    enroot::remove "$@" ;;
bundle)
    enroot::bundle "$@" ;;
*)
    enroot::usage ;;
esac

exit 0
